name: Foodgram workflow

on: push

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install flake8==6.0.0
          pip install -r ./backend/requirements.txt 
          
      - name: Test with flake8 and django tests
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          USE_SQLITE: false
        run: |
          python -m flake8 backend/
          cd backend/
          python manage.py test
          
  build_and_push:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/foodgram_backend ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/foodgram_backend
          
      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend
          
      - name: Build and push gateway image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/foodgram_gateway ./nginx
          docker push ${{ secrets.DOCKER_USERNAME }}/foodgram_gateway
          
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Copy docker-compose.production.yml on server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "foodgram"
      - name: Create .env file on server
        uses: appleboy/ssh-action@master
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          USE_SQLITE: false
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          script: |
            cd foodgram
            sudo echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" > .env
            sudo echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            sudo echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            sudo echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            sudo echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            sudo echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            sudo echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            sudo echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
      - name: SSH commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          script: |
            cd foodgram
            if [ ! -f .env ]; then
              echo ".env file not found!"
              exit 1
            fi
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/static/. /backend_static/static/
          
  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Notify Telegram on success
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="${{ github.actor }} задеплоил Foodgram с комментарием ${{ github.event.commits[0].message }}: https://github.com/${{ github.repository }}/commit/${{github.sha}}"
